interview -> DS 


1) space complexity 
2) time complexity 


program -> 

    1
    2
    3
    4
    5
    6
    7 

    time ?  single 2 second | 2000 users 
    space ?

    variable? 


    12  45  67  88  99  199

    99-> 5th 
    45-> 2nd 
    12-> 1st
    5000-> 6th

    3 


    min 
    avg 
    max 




Time 
Space 

    Big O of your algo ? => worst case => max 


                                DS 
    Linear                                          Non Linear 

    Array                                           Tree  
    Stack                                           Graph 
    Queue 
    LinkedList 

    sorting -> bubble , selection , insertion , mergesort ...... 

    search --> linear , binary search 


    ------------------------------
    C , python , java
    ------------------------------

     C program -> 
     VS 
     GCC 

     -----------------------------

    Eng ->  Computer -> Binary 
    HL   --->  Translator --> LL 
    Guj --->Translator--> Hindi 


    Interpreter : line by line 
    Compiler  : whole at once 
    -------------------------------------
    TC -> BC -> GCC
    freeware -> 
    openSource -> 
    -------------------------------------
    mingw -> Linux -> GCC -> .c => windows 
    ------------------------------------
    emulator -> 
    ------------------------------------
    https://code.visualstudio.com/docs/cpp/config-mingw
-------------------------------------------------------------------
Array ->  collection of same type of data type 
single variable => n numbers -> static -> n = 10
    int a[5];  a[0] a[1] a[2] a[3] a[4]
    item -> index -> start : 0 and end with size-1 
    continue 


    scan
    print 
     

------------------------------
						
						
			CPU			
			Register		KB	
	memory?		Cache		MB	
		main memory	RAM	4 8 16 	GB	
		seconday Storage	HDD/SSD		TB	
						
						
			data speed 		transfer	
	8 gb					
	16 gb					
-----------------------------------------


Storage class -> 
    1)auto    : local  : g.v 
    2)extern   : global : 0 
    3)static   :
    4)register : 


int a[5];//global 
int a; //global 
void main(){
    int a; // g.v     
    print a-> a[0]..a[4] // 0 0 0 0 0  
    //local 

}



0   1   2   3   4 
10  20  30  40  50 


upadte : 

    enter location 
    location => 2
    enter value 
    num => 22


    a[location-1] = num ; 

------------------------------------------------------------
index = location - 1 ;  //7 - 1 => 6   -2 

if(index >= 0 && index <= 4 ){

    a[location-1] = num ; 

}else{
    invalid 
}
------------------------------------------------------------
ex:1 
0   1   2   3   4 
10  20  30  40  50 

shift(1); 

0   1   2   3   4 
20  30  40  50  10


ex:2 
0   1   2   3   4 
10  20  30  40  50 

shift(3); 

0   1   2   3   4 
40  50  10  20  30 
--------------------------------------------------------------


5 array 

a[SIZE] 0 0 0 0 0 


PUSH(10) -> 0th index   10 0 0 0 0 
PUSH(20) -> 1st index   10 20 0 0 0
PUSH(30) -> 2nd index   10 20 30 0 0 
PUSH(40) -> 3rd index   10 20 30 40 0 
PUSH(50) -> 4th index   10 20 30 40 50 
PUSH(60) -> 5th index X => FULL 


Display( ) -> 50 40 30 20 10 

1 For Push 
2 For Display
3 For Exit 

------------------------------------------------------------------



STACK -> data Storage -> behaviour 



LiFo -> Last In First Out -> STACK 

30
20
10


LiFo -> 


#define SIZE 5 
int a[SIZE];



10 20 


------------
							
							
							
	SIZE : 5 						
							
							
	4	50	top			PUSH(10)	top++
	3	40				PUSH(20)	top++
	2	30				display( )	20 10
	1	20				PUSH(30)	top++
	0	10				PUSH(40)	top++
		a				PUSH(50)	top++
	-1					display()	
						PUSH(100)	
							
							
---------------------------------------------------------------------------------------------
Queue -> 
        FiFo  - first in first out 

        -> movie ticket -> 
        -> flipkart -> order -> 

							


								
	stack	LiFo	PUSH	POP	    top			
	queue	FiFo	insert	delete	front,rear			
					                start,end			
								
			1)	simple queue				
			2)	circular queue				
			3)	priority queue				


----------------------------------------------------------------------------------------------


a = [1,5,0,3,5]


1st 
sub = 1 
a = [0,4,0,2,4]


2nd 
sub = 2 
a = [0,2,0,0,2]

3rd 
sub = 2 
a = [0,0,0,0,0]


3 time 


a = [2,4,3,6,4]

0 2 1 4 2 

0 1 0 3 1 

0 0 0 2 0 

0 0 0 0 0 

4 time  

-------------------------------------------------------------------------------------

subbyzero.c 


POP 



1) check all the elements are zero or not ? 

2) sort / min 

3) subtract 



a = [1,5,0,3,5]

0 0 0 0 0
----------------------------------------------------------------------

52 card 

20 card 

10 card 


card [ 2 6 5 6 4 4 8 1 5 3]

PlayerA                         PlayerB
 2 5 4 8 5                        6 6 4 1 3 

 battle : 
        2,6 

PlayerA                         PlayerB
   5 4 8 5                          6 4 1 3 

 PlayerB is Winner 

PlayerA                         PlayerB
   5 4 8 5                          6 41 3 2 6 



Battle : 
    5,6 


 PlayerB is Winner 

PlayerA                         PlayerB
     4 8 5                          4 1 3 2 6 5 6 


Battle : 
    4,4 


Tie: 

PlayerA                         PlayerB
       8 5                         1 3 2 6 5 6 



Battle : 
    4,4,8,1 

PlayerA is Winner


PlayerA                         PlayerB
       5,4,4,8,1                         3 2 6 5 6 



game -------- play who does not have single card is losser..... 

we dont have infinite play --> max 100 battle 

--------------------------------------------------------------------------------------------------



name = "jony jony yes papa" 



encrypt() => name 

nfghyu7685irjfhngbty758rofkj

decrypt() => nfghyu7685irjfhngbty758rofkj => jony jony yes papa 



jony jony yes papa
 







-------------------------------------------------------------------------------




class -> logical , group , general 

object -> physical , member , special 



Iphone : class 
Laptop : class 

Gandhiji : object 

Dhiraj Sir : object  

Remote : class 

LEd Tv : class 

Legion Y 520 Laptop : object 


class : property ->   function , variable 

object -> can access class property 


class Bank : 
    accountNum 
    userName
    password
    balance 

    wid()
    dep()
    checkBal()
    transfer() 


x {accountNum,userName,password,balance,functions } 19
Y {accountNum,userName,password,balance,functions } 25
z {accountNum,userName,password,balance,functions } 36
A {accountNum,userName,password,balance,functions } 58 

x.wid(1000)   



Queue 
    insert()
    delete() 


 playerA insert {2,3,4,5,}
 playerB insert {,4,,5,6,6}
 balle  {1,3}
--------------------------------------------------------------------------------------------


 
what is pointer variable? 
why we use pointer variable? 

pointer variable is a special variable
which can store an address of another variable. 


int k;  // can store value 
int *p; // can store memory address 


int *p;
int * p ;
int* p;

___&_____ operator we use to get address of a variable? 


------------------------------------------------------------------------------
DMA -> dynamic memory allocation 


int k; //2 byte allocate ->  implicitly allcoated 
char c; //1 byte -> automatically allocated 

when we are done with out program , memory will be release 

-----------------------------------------------------------------------------

when user/developer allocates memory - DMA 

c -> 
    malloc() - alloctes block only 
    calloc() - allocte n number of blocks with same size 
    free()
    realloc() - if you want to resize existing allocated memory -we will use 

int *p; // 2 byte 

//array 
int *a; //array  => 2byte * 5 

--------------------------------------------------------------------------------


stdlib.h 

_________ and ________ functions are used to allocate memory in c ? 
malloc          calloc 

________ function is used to release memory in c? 
free 


_______ is used to store address of a variable? 
pointer 


________ is used to retrive address of  a variable? 
& 


______ is used to know how much byte occupied by variable? 
sizeof 

_________ is used to allocate 5 block of 2mb in c ? 
calloc 


can we use calloc to allocate memory for sturcture ? 
YES -- calloc allocate blocks we can allocate single block 
---------------------------------------------------------------



int *p; 
char *c;
float *j; 



char *str = "royal education"; 

str++; 

printf("%s",str); //royal education 

printf("%c",str); //r 
str++;
printf("%c",str); //o


--------------------------------------------------------

list -> self referential 

linked list -> 

india->[] 

usa->[]

uk->[]

germany->[] 



data -> node -> collection of nodes 

node is divided into two part 
    1) data 
    2) next 


1st node is mostly known as HEAD{first}

node-> next is null -> last 


linked 
    3 type 
                1) single linked list - singly 
                2) double linked list - doubly 
                3) circular linked list -  singly circular , doubly circular



1) single linked list 
        1) insert beg 
        2) insert end 
        3) insert any [mid] [num,location]


ex.1 
    10      20      30      40      50      60      70
    head                                           last 


    insert any ->
            enter location , 3,300 


    10      20      300     30      40      50      60      70
    head                                           last 


ex. 2 

    10      20      30      40      50      60      70
    head                                           last 

    insert any ->
            enter number , 30 ,300 

    10      20      30      300     40      50      60      70
    head                                                   last 

    insert any ->
            enter number , 3000 ,3500
            3000 not found PTA 
            



























